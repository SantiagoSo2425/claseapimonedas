pipeline{
    agent any

    environment{
        DOCKER_IMAGE = 'santiagosuarezosorio/apimonedastt'
        KUBECONFIG = credentials('kubernetes-config')
        // Agregar timestamp para versioning
        BUILD_TIMESTAMP = new Date().format('yyyyMMdd-HHmmss')
        IMAGE_TAG = "${BUILD_TIMESTAMP}-${BUILD_NUMBER}"
    }

    stages{
        stage('Pre-Build Validation') {
            steps {
                script {
                    echo "üîç Validando pre-requisitos..."
                    bat """
                        echo "Verificando Docker..."
                        docker --version
                        echo "Verificando kubectl..."
                        kubectl version --client
                        echo "Verificando conexi√≥n a cluster..."
                        kubectl cluster-info
                    """
                }
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    echo "üèóÔ∏è Construyendo aplicaci√≥n..."
                    bat """
                        echo "Compilando con Maven..."
                        mvn clean compile -DskipTests
                        echo "Ejecutando tests unitarios..."
                        mvn test || echo "WARN: Algunos tests fallaron, continuando..."
                    """
                }
            }
        }

        stage('Construir imagen Docker'){
            steps{
                script {
                    echo "üê≥ Construyendo imagen Docker..."
                    bat """
                        docker build . -t ${DOCKER_IMAGE}:${IMAGE_TAG}
                        docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest
                        echo "‚úÖ Imagen construida: ${DOCKER_IMAGE}:${IMAGE_TAG}"
                    """
                }
            }
        }

        stage('Limpiar recursos previos') {
            steps {
                script {
                    echo "üßπ Limpiando recursos previos..."
                    bat """
                        kubectl delete hpa apimonedas-hpa --ignore-not-found -n apimonedas
                        kubectl delete deployment apimonedas-despliegue --ignore-not-found -n apimonedas
                        kubectl delete service apimonedas-servicio --ignore-not-found -n apimonedas
                        kubectl delete configmap apimonedas-cm --ignore-not-found -n apimonedas
                        kubectl delete secret bdmonedas-secretos --ignore-not-found -n apimonedas
                        echo "‚úÖ Recursos previos limpiados"
                    """
                }
            }
        }

        stage('Publicar imagen'){
            steps{
                script {
                    echo "üì§ Publicando imagen en Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat """
                            docker login -u %DOCKER_USER% -p %DOCKER_PASS%
                            docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                            docker logout
                            echo "‚úÖ Imagen publicada: ${DOCKER_IMAGE}:${IMAGE_TAG}"
                        """
                    }
                }
            }
        }

        stage('Aplicar Manifiestos') {
            steps {
                script {
                    echo "üìã Aplicando manifiestos de Kubernetes..."
                    bat """
                        echo "Creando namespace..."
                        kubectl create namespace apimonedas --dry-run=client -o yaml | kubectl apply -f -

                        echo "Aplicando manifiestos..."
                        kubectl apply -f manifiestos\\api\\

                        echo "Verificando recursos creados..."
                        kubectl get all -n apimonedas
                        echo "‚úÖ Manifiestos aplicados correctamente"
                    """
                }
            }
        }

        stage('Despliegue y Verificaci√≥n'){
            steps{
                script {
                    echo "üöÄ Desplegando aplicaci√≥n..."
                    bat """
                        echo "Actualizando imagen del deployment..."
                        kubectl set image deployment/apimonedas-despliegue apimonedas=${DOCKER_IMAGE}:${IMAGE_TAG} -n apimonedas

                        echo "Esperando rollout..."
                        kubectl rollout status deployment/apimonedas-despliegue -n apimonedas --timeout=600s

                        echo "‚úÖ Despliegue completado exitosamente"
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "üè• Verificando salud de la aplicaci√≥n..."
                    bat """
                        echo "Estado de los pods:"
                        kubectl get pods -n apimonedas -o wide

                        echo "Estado del deployment:"
                        kubectl get deployment apimonedas-despliegue -n apimonedas

                        echo "Estado del servicio:"
                        kubectl get service -n apimonedas

                        echo "Eventos recientes:"
                        kubectl get events -n apimonedas --sort-by='.lastTimestamp' | tail -10

                        echo "Verificando pods en estado Running..."
                        kubectl wait --for=condition=ready pod -l app=apimonedas -n apimonedas --timeout=300s

                        echo "‚úÖ Aplicaci√≥n saludable y funcionando"
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üìä Recopilando informaci√≥n final..."
                bat """
                    echo "=== RESUMEN FINAL ==="
                    echo "Imagen desplegada: ${DOCKER_IMAGE}:${IMAGE_TAG}"
                    echo "Namespace: apimonedas"
                    echo "Timestamp: ${BUILD_TIMESTAMP}"

                    echo "Estado final de recursos:"
                    kubectl get all -n apimonedas || echo "No se pudo obtener estado de recursos"
                """
            }
        }
        success {
            echo "üéâ ¬°Pipeline completado exitosamente!"
            echo "‚úÖ Aplicaci√≥n desplegada: ${DOCKER_IMAGE}:${IMAGE_TAG}"
        }
        failure {
            script {
                echo "‚ùå Pipeline fall√≥. Recopilando logs para diagn√≥stico..."
                bat """
                    echo "=== LOGS DE DIAGN√ìSTICO ==="
                    echo "Pods en el namespace:"
                    kubectl get pods -n apimonedas || echo "No se pudieron obtener pods"

                    echo "Logs de pods con problemas:"
                    kubectl logs -l app=apimonedas -n apimonedas --tail=100 || echo "No se pudieron obtener logs"

                    echo "Eventos del namespace:"
                    kubectl get events -n apimonedas --sort-by='.lastTimestamp' || echo "No se pudieron obtener eventos"

                    echo "Descripci√≥n del deployment:"
                    kubectl describe deployment apimonedas-despliegue -n apimonedas || echo "No se pudo describir deployment"
                """
            }
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline completado con advertencias"
        }
    }
}