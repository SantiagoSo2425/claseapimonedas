pipeline{
    agent any

    environment {
        TIMEOUT_MINUTES = 5  // Tiempo máximo de espera para que los pods estén listos
        DB_NAMESPACE = "bdmonedas"
        // Usar credenciales de Jenkins para Kubernetes
        KUBECONFIG_CREDENTIALS = credentials('kubernetes-config')
        KUBECONFIG = "${WORKSPACE}\\kubeconfig.yaml"  // Archivo temporal para la configuración
    }

    stages {
        stage('Configurar Kubernetes') {
            steps {
                script {
                    echo "Configurando acceso a Kubernetes..."

                    // Comprobar si kubectl está instalado
                    bat "kubectl version --client || echo 'kubectl no está instalado correctamente'"

                    // Copiar las credenciales de Kubernetes de Jenkins al archivo temporal
                    bat "copy %KUBECONFIG_CREDENTIALS% %KUBECONFIG%"

                    // Verificar la configuración
                    bat "kubectl --kubeconfig=%KUBECONFIG% config view"

                    // Verificar conexión al cluster
                    bat "kubectl --kubeconfig=%KUBECONFIG% cluster-info || echo 'No se puede conectar al cluster de Kubernetes'"

                    // Intentar listar los nodos
                    bat "kubectl --kubeconfig=%KUBECONFIG% get nodes || echo 'No se pueden listar los nodos'"
                }
            }
        }
        stage('Limpiar datos previos') {
            steps {
                script {
                    // Asegurarse de eliminar completamente el StatefulSet anterior si existe
                    bat """
                        kubectl --kubeconfig=%KUBECONFIG% delete statefulset bdmonedas-sfs --namespace bdmonedas --ignore-not-found
                        kubectl --kubeconfig=%KUBECONFIG% delete pvc --selector=app=bdmonedas --namespace bdmonedas --ignore-not-found
                        kubectl --kubeconfig=%KUBECONFIG% delete configmap bdmonedas-config --namespace bdmonedas --ignore-not-found
                        kubectl --kubeconfig=%KUBECONFIG% delete service bdmonedas-servicio --namespace bdmonedas --ignore-not-found
                        kubectl --kubeconfig=%KUBECONFIG% delete persistentvolume bdmonedas-pv --ignore-not-found
                    """
                }
            }
        }
        stage('Crear namespace si no existe') {
            steps {
                script {
                    bat """ kubectl --kubeconfig=%KUBECONFIG% get namespace bdmonedas || kubectl --kubeconfig=%KUBECONFIG% create namespace bdmonedas """
                }
            }
        }
        stage('Aplicar manifiestos infrastructura') {
            steps {
                script {
                    // Aplicar el StorageClass primero si existe
                    bat """ kubectl --kubeconfig=%KUBECONFIG% apply -f manifiestos/infraestructura/bdmonedas-storage-class.yaml || echo "StorageClass ya existe o no se encuentra" """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% apply -f manifiestos/infraestructura/bdmonedas-pv.yaml """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% apply -f manifiestos/infraestructura/bdmonedas-secretos.yaml """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% apply -f manifiestos/infraestructura/bdmonedas-init.yaml """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% apply -f manifiestos/infraestructura/bdmonedas-servicios.yaml """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% apply -f manifiestos/infraestructura/bdmonedas-sfs.yaml """
                }
            }
        }
        stage('Verificar Despliegue') {
            steps {
                script {
                    bat """ kubectl --kubeconfig=%KUBECONFIG% get pods -n bdmonedas """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% get services -n bdmonedas """
                    bat """ kubectl --kubeconfig=%KUBECONFIG% get statefulset -n bdmonedas """
                }
            }
        }
        stage('Esperar a que la BD esté lista') {
            steps {
                script {
                    echo "Esperando a que el pod de la base de datos esté listo..."
                    timeout(time: env.TIMEOUT_MINUTES, unit: 'MINUTES') {
                        // Utilizamos groovy directamente para el polling continuo
                        def podReady = false
                        def consecutiveRunningCount = 0
                        def MAX_CONSECUTIVE_RUNNING = 3

                        while (!podReady) {
                            try {
                                def statusText = bat(script: "kubectl --kubeconfig=%KUBECONFIG% get pod bdmonedas-sfs-0 -n bdmonedas -o jsonpath=\"{.status.phase}\"", returnStdout: true).trim()
                                echo "Estado del pod: ${statusText}"

                                if (statusText == "Running") {
                                    // Verificar si el contenedor está realmente Ready
                                    def containerReadyText = bat(script: "kubectl --kubeconfig=%KUBECONFIG% get pod bdmonedas-sfs-0 -n bdmonedas -o jsonpath=\"{.status.containerStatuses[0].ready}\"", returnStdout: true).trim()

                                    if (containerReadyText == "true") {
                                        consecutiveRunningCount++
                                        echo "Pod en estado Running y Ready consecutivo: ${consecutiveRunningCount}/${MAX_CONSECUTIVE_RUNNING}"

                                        if (consecutiveRunningCount >= MAX_CONSECUTIVE_RUNNING) {
                                            echo "Pod ha estado en estado Running y Ready por ${MAX_CONSECUTIVE_RUNNING} verificaciones consecutivas."
                                            podReady = true
                                            break
                                        }
                                    } else {
                                        echo "El contenedor está Running pero no Ready."
                                        consecutiveRunningCount = 0
                                    }
                                } else {
                                    consecutiveRunningCount = 0
                                }

                                if (!podReady) {
                                    bat "kubectl --kubeconfig=%KUBECONFIG% describe pod bdmonedas-sfs-0 -n bdmonedas"
                                    echo "Esperando 10 segundos para verificar nuevamente..."
                                    sleep(time: 10, unit: 'SECONDS')
                                }
                            } catch (Exception e) {
                                echo "Error al verificar el estado del pod: ${e.message}"
                                echo "Esperando 10 segundos antes de reintentar..."
                                sleep(time: 10, unit: 'SECONDS')
                            }
                        }

                        // Esperar un poco más para asegurarnos que PostgreSQL haya terminado su inicialización interna
                        echo "El pod está listo. Esperando 5 segundos adicionales para asegurar que PostgreSQL esté completamente inicializado..."
                        sleep(time: 5, unit: 'SECONDS')

                        echo "Verificación completa. La base de datos está lista para usarse."
                    }
                }
            }
        }
        stage('Verificar conexión a la BD') {
            steps {
                script {
                    echo "Verificando conexión a la base de datos PostgreSQL..."
                    bat """
                        kubectl --kubeconfig=%KUBECONFIG% exec -it bdmonedas-sfs-0 -n bdmonedas -- psql -U postgres -d monedasdb -c "SELECT 'Conexión exitosa a la base de datos' as mensaje;"
                    """
                }
            }
        }
        stage('Verificar tablas creadas') {
            steps {
                script {
                    echo "Verificando tablas creadas en la base de datos..."
                    bat """
                        kubectl --kubeconfig=%KUBECONFIG% exec -it bdmonedas-sfs-0 -n bdmonedas -- psql -U postgres -d monedasdb -c "\\dt"
                    """
                }
            }
        }
        stage('Backup inicial') {
            steps {
                script {
                    def timestamp = new Date().format('yyyyMMdd_HHmmss')
                    echo "Creando backup inicial de la base de datos..."
                    bat """
                        mkdir backups 2>nul || echo "Directorio de backups ya existe"
                        kubectl --kubeconfig=%KUBECONFIG% exec -it bdmonedas-sfs-0 -n bdmonedas -- pg_dump -U postgres -d monedasdb -F c -f /tmp/backup_inicial.dump
                        kubectl --kubeconfig=%KUBECONFIG% cp bdmonedas/bdmonedas-sfs-0:/tmp/backup_inicial.dump backups/backup_inicial_${timestamp}.dump || echo "Error al copiar el backup"
                    """
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Despliegue completado exitosamente'
                echo 'Base de datos PostgreSQL lista para ser utilizada por la aplicación'
            }
        }
    }

    post {
        success {
            echo 'Pipeline de base de datos completado exitosamente'
        }
        failure {
            echo 'El pipeline de base de datos falló. Revisando los logs...'
            script {
                bat """
                    echo "=== Logs del pod de la base de datos ==="
                    kubectl --kubeconfig=%KUBECONFIG% logs bdmonedas-sfs-0 -n bdmonedas || echo "No se pudieron obtener los logs del pod"

                    echo "=== Descripción del pod de la base de datos ==="
                    kubectl --kubeconfig=%KUBECONFIG% describe pod bdmonedas-sfs-0 -n bdmonedas || echo "No se pudo obtener la descripción del pod"

                    echo "=== Eventos del namespace ==="
                    kubectl --kubeconfig=%KUBECONFIG% get events -n bdmonedas || echo "No se pudieron obtener los eventos del namespace"
                """
            }
        }
        always {
            echo 'Limpieza de recursos temporales...'
            // Opcionalmente, eliminar el archivo kubeconfig temporal al finalizar
            bat "del %KUBECONFIG% || echo El archivo de configuración ya no existe"
        }
    }
}